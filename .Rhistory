q()
utils:::menuInstallLocal()
q()
q()
5+6
factorial (10)
b <-11
b <- 11
d = 99
5 -> a
a + b
A <- 55
a + A
moe_lyubimoe_chislo <- 3
moe_lyubimoe_chislo
y <- c(3, -2, 5, 6, NA, 9)
y
y + 2
0/0
t <- 0/0
t
1/0
1/Inf
atan(Inf)
pi/2
z <- 100:200
z
x <- c(23,15,46,NA)
z <- c(5,6,NA,8)
mean (x)
mean(x, na.rm = TRUE)
mean(z,na.rm = TRUE)
sum(x)
sum(x, na.rm = = TRUE)
sum(x, na.rm = TRUE)
d <- data.frame (rost=x, ves=z)
d
d[4,1]
d[3,1]
]
d[2,]
d[,2]
d$rost
d$ves
my_list <- list(a=7,b=10:20, table =d)
my_list$a
my_list$b
my_list$table
d$rost
my_list[[2]]
install.packages(c("dplyr", "ggplot2", "GGally", "psych"))
install.packages("devtools")
library("psych")
library("dplyr")
library("ggplot2")
library("GGally")
t <- swiss
describe(t)
model2 <- lm(data=t,
Fertility~Agriculture+Education+Catholic)
coef(model2)
fitted(model2)
residuals(model2)
deviance(model2)
report <- summary(model2)
report
report$r.squared
cor(t$Fertility, fitted(model2))
cor(t$Fertility, fitted(model2))^2
nd2 <- data.frame(Agriculture=0.5, Catholic=0.5, Education=20)
predict(model2,nd2)
data(sleep)
p <- sleep
p
mean(p$extra)
describe(p)
var(p$extra[1:10])
data(mtcars)
describe(mtcars)
model_mtcars <- lm(data=mtcars, mpg~disp+hp+wt)
summary(model_mtcars$r.squared)
summary(model_mtcars)$r.squared
model_mtcars2 <- lm(data=mtcars, mpg~disp+hp+wt+am)
summary(model_mtcars2)
summary(lm(data=mtcars, mpg~hp+wt+am))$r.squared
summary(lm(data=mtcars, mpg~hp+wt+syl))$r.squared
summary(lm(data=mtcars, mpg~hp+wt+cyl))$r.squared
summary(lm(data=mtcars, mpg~cyl+wt+am))$r.squared
summary(lm(data=mtcars, mpg~hp+cyl+am))$r.squared
dir()
source("pollutantmean.R")
add2 <- function(x,y) {
x+y
}
add2(3,5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[1] <- mean(y[, i])
}
means
}
columnmean(airquaity)
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[1] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality, FALSE)
columnmean(airquality)
clear all
cube <- function(x,n) {
x^3
}
cube(3)
cls
clear
cube(3)
cube <- function(x,n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y+z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
source("cachematrix.R")
setwd("C:/Users/Nika/Desktop/Coursera/Data Science Specialization/R Programming/ProgrammingAssignment2")
source("cachematrix.R")
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
nm = makeCacheMatrix(m)
cacheSolve(nm)
nm <- makeCacheMatrix(m)
cacheSolve(nm)
z <-matrix(c(1,1,2,3,1,3,1,2,4),3,3)
z
cacheSolve(z)
source("cachematrix.R")
z <-matrix(c(1,1,2,3,1,3,1,2,4),3,3)
z
cacheSolve(z)
source("cachematrix.R")
z <-matrix(c(1,1,2,3,1,3,1,2,4),3,3)
z
cacheSolve(z)
source("cachematrix.R")
z <-matrix(c(1,1,2,3,1,3,1,2,4),3,3)
z
cacheSolve(z)
x <- makeCacheMatrix(c(1,1,2,3,1,3,1,2,4),3,3)
x <- makeCacheMatrix(c(1,1,2,3,1,3,1,2,4), ncol=3)
x <- makeCacheMatrix(c(1,1,2,3,1,3,1,2,4), ncol(3)
)
x <- makeCacheMatrix(c(1,1,2,3,1,3,1,2,4), nrow = 3, ncol = 3, byrow = TRUE)
source("cachematrix.R")
x <- makeCacheMatrix(c(1,1,2,3,1,3,1,2,4), nrow = 3, ncol = 3)
x <- makeCacheMatrix(c(1,1,2,3,1,3,1,2,4))
x
x <- makeCacheMatrix(matrix(c(1,1,2,3,1,3,1,2,4), ncol=3))
x
source("cachematrix.R")
x <- makeCacheMatrix(matrix(c(1,1,2,3,1,3,1,2,4), ncol=3, nrow=3))
x
d <- makeCacheMatrix(matrix(c(1,1,2,3,1,3,1,2,4), ncol=3, nrow=3))
d
source("cachematrix.R")
d <- makeCacheMatrix(matrix(c(1,1,2,3,1,3,1,2,4), ncol=3, nrow=3))
d
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
v <- makeCacheMatrix(m)
cacheSolve(v)
cacheSolve(v)
source("cachematrix.R")
source("cachematrix.R")
m=matrix(c(9,10,3,20,25,30,35,40,45,50,3,8,65,70,75,80), nrow=4, byrow=T)
m
v <- makeCacheMatrix(m)
cacheSolve(v)
